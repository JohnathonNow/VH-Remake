/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.johnwesthoff.vhremake;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;

/**
 *
 * @author John
 */
public class ChooseShips extends javax.swing.JPanel {

    /**
     * Creates new form ChooseShips
     * @param args
     */
    private final FileE ships[];
    Properties props;
    public File getShip(int i)
    {
        if (i<0||i>=ships.length)
        {
            throw new IllegalArgumentException("Index must be between 0 and "+(ships.length-1));
        }
        return ships[i];
    }
    public FileE[] getShips()
    {
        return ships;
    }
    public ChooseShips() {
        props = new Properties();
        try {
            if (new File("preferences.prp").exists())
                props.load(new FileReader(("preferences.prp")));
        } catch (IOException ex) {
            
        }
        initComponents();
        jButton1.setActionCommand("go");
        ships = new FileE[4];
        for (int i = 0; i < ships.length; i ++)
        {
            ships[i] = new FileE(props.getProperty("ship"+i,"CHOOSE\n"));
        }
        jList2.setListData(ships);
        shipChoosies.removeAllItems();
        shipChoosies.addItem(new ShipDesign(new FileE("CHOOSE\n")));
        File b = new File(System.getProperty("user.dir"));
        if (b.isDirectory())
        {
            String[] n = b.list((File dir, String name1) -> (name1.endsWith(".shp")));
            for (String a:n)
            {
                ShipDesign toAdd = new ShipDesign(new FileE(a));
                try
                {
                    File bob = new File(a+".png");
                    if (bob.exists())
                    {
                        BufferedImage bi = ImageIO.read(bob);
                        ImageIcon ii = new ImageIcon(bi.getScaledInstance(64, 64, BufferedImage.SCALE_FAST));   
                        toAdd.setIcon(ii);
                    }
                }
                catch (IOException e)
                {
                    
                }
                shipChoosies.addItem(toAdd);
   
            }
        }
        DefaultListCellRenderer defaultRenderer = new DefaultListCellRenderer();
        shipChoosies.setRenderer((JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) -> {
    JLabel renderer = (JLabel) defaultRenderer.getListCellRendererComponent(list, value, index,isSelected, cellHasFocus);
        if (value instanceof JLabel)
        {
            JLabel yes = (JLabel)value;
            if (isSelected)
                renderer.setForeground(list.getForeground());
            renderer.setIcon(yes.getIcon());
            renderer.setText(yes.getText().substring(0, yes.getText().length()-4));
        }
    return renderer;
        });
        shipChoosies.addActionListener((ActionEvent e) -> {
        if (jList1.getSelectedIndex()>=0&&jList1.getSelectedIndex()<4)
        {
            ships[jList1.getSelectedIndex()] = ((ShipDesign)shipChoosies.getSelectedItem()).filee;
            jList2.setListData(ships);
            props.setProperty("ship"+jList1.getSelectedIndex(), ((ShipDesign)shipChoosies.getSelectedItem()).filee.getAbsolutePath());
            try {
                props.store(new FileWriter("preferences.prp"), null);
            } catch (IOException ex) {
                Logger.getLogger(ChooseShips.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        shipChoosies = new javax.swing.JComboBox();

        setPreferredSize(new java.awt.Dimension(720, 500));
        setLayout(null);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Player 1", "Player 2", "Player 3", "Player 4" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setSelectedIndex(0);
        jList1.setSelectionBackground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(jList1);

        add(jScrollPane1);
        jScrollPane1.setBounds(12, 208, 69, 76);

        jLabel1.setText("Assigning:");
        add(jLabel1);
        jLabel1.setBounds(12, 179, 59, 16);

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "CHOOSE", "CHOOSE", "CHOOSE", "CHOOSE" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList2.setEnabled(false);
        jList2.setFocusable(false);
        jScrollPane2.setViewportView(jList2);

        add(jScrollPane2);
        jScrollPane2.setBounds(93, 208, 180, 76);

        jButton1.setText("Done");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(297, 445, 70, 30);

        shipChoosies.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(shipChoosies);
        shipChoosies.setBounds(280, 200, 440, 90);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    public void addActionListener(ActionListener a)
    {
        jButton1.addActionListener(a);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox shipChoosies;
    // End of variables declaration//GEN-END:variables
    /**
     * A file class that overrides the toString method
     * in order to format nicely.
     * 
     * @version 0.01, 2/20/15
     * @author John
     * @see vhremake.ChooseShips.FileE#toString()
     */
    protected static class FileE extends File
    {
        public FileE(String pathname) {
            super(pathname);
        }
        public FileE(File fi) {
            this(fi.getAbsolutePath());
        }
        @Override
        public String toString()
        {
            return this.getName();
        }
    }
    protected static class ShipDesign extends JLabel
    {
        public FileE filee;
        public ShipDesign(FileE ship)
        {
            filee = ship;
            this.setText(filee.toString());
        }
        
        @Override
        public String toString()
        {
            return filee.toString();
        }
    }
}
