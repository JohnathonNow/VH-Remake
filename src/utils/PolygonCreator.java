/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package utils;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Polygon;
import java.util.StringTokenizer;

/**
 *
 * @author John
 */
public class PolygonCreator extends javax.swing.JFrame {

    /**
     * Creates new form PolygonCreator
     */
    Polygon P;
    public PolygonCreator() {
        P = new Polygon();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel(){public void paint(Graphics g)
            {
                g.clearRect(0, 0, getWidth(), getHeight());
                g.setColor(Color.lightGray);
                drawGrid(g,grid.getValue(),getWidth()/grid.getValue());
                g.setColor(Color.red);
                g.drawLine(getWidth()/2-1,getHeight()/2,getWidth()/2+1,getHeight()/2);
                g.drawLine(getWidth()/2,getHeight()/2-1,getWidth()/2,getHeight()/2+1);
                g.setColor(Color.black);
                g.drawPolygon(P);
            }}
            ;
            jScrollPane1 = new javax.swing.JScrollPane();
            output = new javax.swing.JTextArea();
            stg = new javax.swing.JCheckBox();
            coordinate = new javax.swing.JLabel();
            grid = new javax.swing.JSlider();
            jLabel2 = new javax.swing.JLabel();
            menuBar = new javax.swing.JMenuBar();
            fileMenu = new javax.swing.JMenu();
            jMenuItem1 = new javax.swing.JMenuItem();
            editMenu = new javax.swing.JMenu();
            jMenuItem2 = new javax.swing.JMenuItem();
            menuBend = new javax.swing.JMenuItem();
            helpMenu = new javax.swing.JMenu();

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

            jPanel1.setBackground(new java.awt.Color(255, 255, 255));
            jPanel1.setPreferredSize(new java.awt.Dimension(300, 300));
            jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jPanel1MouseClicked(evt);
                }
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    jPanel1MouseReleased(evt);
                }
            });
            jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                public void mouseMoved(java.awt.event.MouseEvent evt) {
                    jPanel1MouseMoved(evt);
                }
            });

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 300, Short.MAX_VALUE)
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 300, Short.MAX_VALUE)
            );

            output.setEditable(false);
            output.setColumns(20);
            output.setRows(8);
            jScrollPane1.setViewportView(output);

            stg.setText("Snap to Grid");
            stg.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    stgActionPerformed(evt);
                }
            });

            coordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            coordinate.setText("(0,0)");

            grid.setMajorTickSpacing(10);
            grid.setMinimum(10);
            grid.setOrientation(javax.swing.JSlider.VERTICAL);
            grid.setPaintLabels(true);
            grid.setPaintTicks(true);
            grid.setSnapToTicks(true);
            grid.setToolTipText("");
            grid.setValue(10);
            grid.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    gridMouseReleased(evt);
                }
            });
            grid.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    gridPropertyChange(evt);
                }
            });

            jLabel2.setText("Scaling:");

            fileMenu.setMnemonic('f');
            fileMenu.setText("File");

            jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
            jMenuItem1.setText("New");
            jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem1ActionPerformed(evt);
                }
            });
            fileMenu.add(jMenuItem1);

            menuBar.add(fileMenu);

            editMenu.setMnemonic('e');
            editMenu.setText("Edit");

            jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
            jMenuItem2.setText("Undo");
            jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem2ActionPerformed(evt);
                }
            });
            editMenu.add(jMenuItem2);

            menuBend.setText("Make Bend");
            menuBend.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    menuBendActionPerformed(evt);
                }
            });
            editMenu.add(menuBend);

            menuBar.add(editMenu);

            helpMenu.setMnemonic('h');
            helpMenu.setText("Help");
            menuBar.add(helpMenu);

            setJMenuBar(menuBar);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(grid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(coordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(stg)
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(grid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(87, 87, 87)
                            .addComponent(stg)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(coordinate)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(29, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked

    }//GEN-LAST:event_jPanel1MouseClicked

    private void stgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stgActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        P.reset();
        output.setText("");
        jPanel1.repaint();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        int xCopy[] = new int[P.npoints];
        int yCopy[] = new int[P.npoints];
        System.arraycopy(P.xpoints, 0, xCopy, 0, P.npoints-1);
        System.arraycopy(P.ypoints, 0, yCopy, 0, P.npoints-1);
        P.reset();
        for(int i = 0; i < xCopy.length-1; i++)
        {
            P.addPoint(xCopy[i], yCopy[i]);
        }
        String cur = output.getText(), replacer = "";
        StringTokenizer st = new StringTokenizer(cur,"\n");
        int tokens = st.countTokens();
        for (int i = 0; i < tokens-1; i++)
        {
            replacer+=st.nextToken()+"\n";
        }
        output.setText(replacer);
        jPanel1.repaint();
    }//GEN-LAST:event_jMenuItem2ActionPerformed
/**
 * Handles clicks
 * 
 * @param evt - the mouse event
 */
    private void jPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseReleased
        int xT = evt.getX();
        int yT = evt.getY();
        if (stg.isSelected())
        {
            xT = (jPanel1.getWidth()/grid.getValue()) * Math.round((xT / (jPanel1.getWidth()/(float)grid.getValue())));
            yT = (jPanel1.getHeight()/grid.getValue()) * Math.round((yT / (jPanel1.getHeight()/(float)grid.getValue())));
        }
        P.addPoint(xT, yT);
        double sc = jPanel1.getWidth()/grid.getValue();
        if (sc == 0) sc = 1;
        addLine("shape.addPoint("+(int)((xT-jPanel1.getWidth()/2)/sc)+","+(int)((yT-jPanel1.getHeight()/2)/sc)+");");
        jPanel1.repaint();
    }//GEN-LAST:event_jPanel1MouseReleased

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        int xT = evt.getX();
        int yT = evt.getY();
        int sc = jPanel1.getWidth()/grid.getValue();
        if (sc == 0) sc =1;
        if (stg.isSelected())
        {
            xT = (jPanel1.getWidth()/grid.getValue()) * Math.round((xT / (jPanel1.getWidth()/(float)grid.getValue())));
            yT = (jPanel1.getHeight()/grid.getValue()) * Math.round((yT / (jPanel1.getHeight()/(float)grid.getValue())));
        }
        String newText = "("+(int)((xT-jPanel1.getWidth()/2)/sc)+","+(int)((yT-jPanel1.getHeight()/2)/sc)+")";
        coordinate.setText(newText);
    }//GEN-LAST:event_jPanel1MouseMoved

    private void gridPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_gridPropertyChange

    }//GEN-LAST:event_gridPropertyChange

    private void gridMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridMouseReleased
        // TODO add your handling code here:
        jPanel1.repaint();
    }//GEN-LAST:event_gridMouseReleased

    private void menuBendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBendActionPerformed
        double angle = Math.PI/4;
        output.setText("");
        P.reset();
        P.addPoint(-16, -8);
        addLine("shape.addPoint(-16,-8);");
        P.addPoint(0, -8);
        addLine("shape.addPoint(0,-8);");
        double xx = 0;
        double yy = -8;
        xx+=Math.cos(angle)*16;
        yy-=Math.sin(angle)*16;
        addLine("shape.addPoint("+xx+","+yy+");");
        P.addPoint((int)xx, (int)yy);
        xx+=Math.cos(angle-Math.PI/2)*16;
        yy-=Math.sin(angle-Math.PI/2)*16;
        addLine("shape.addPoint("+xx+","+yy+");");
        P.addPoint((int)xx, (int)yy);
        xx+=Math.cos(angle-Math.PI)*16;
        yy-=Math.sin(angle-Math.PI)*16;
        addLine("shape.addPoint("+xx+","+yy+");");
        P.addPoint((int)xx, (int)yy);
        addLine("shape.addPoint(0,8);");
        P.addPoint(0, 8);
        addLine("shape.addPoint(-16,8);");
        P.addPoint(-16, 8);        
        int midX = jPanel1.getWidth()/2;
        int midY = jPanel1.getHeight()/2;
        P.translate(midX, midY);
        jPanel1.repaint();
    }//GEN-LAST:event_menuBendActionPerformed
/**
 * Draws a grid from 0,0 to num*space,num*space
 * 
 * @param g - the graphics to draw with
 * @param num - the number of grid lines
 * @param space - the separation between each line
 */
public void drawGrid(Graphics g, int num, int space)
{
    for (int i = 1; i<=num; i++)
    {
        g.drawLine(0, i*space, num*space, i*space);
        g.drawLine(i*space, 0, i*space, num*space);
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PolygonCreator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PolygonCreator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PolygonCreator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PolygonCreator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PolygonCreator().setVisible(true);
            }
        });
    }
    /**
     * Adds a message to the output block.
     * 
     * @param s - The message to be added
     */
public void addLine(String s)
{
    output.setText(output.getText()+s+"\n");
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel coordinate;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSlider grid;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuBend;
    private javax.swing.JTextArea output;
    private javax.swing.JCheckBox stg;
    // End of variables declaration//GEN-END:variables

}
